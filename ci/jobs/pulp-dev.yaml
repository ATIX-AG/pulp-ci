- job-template:
    name: 'pulp-{pulp_version}-dev-{os}'
    node: '{os}-vanilla-np'
    scm:
        - pulp-packaging-github
    wrappers:
        - config-file-provider:
            files:
                - file-id: rhn_credentials
                  variable: RHN_CREDENTIALS
        - inject:
            properties-content: |
                OS={os}
                PULP_VERSION={pulp_version}
    triggers:
        - reverse:
            jobs: 'build-automation-repo-{pulp_version}-dev'
            result: 'success'
    builders:
        - shell: |
            sudo yum install -y git ansible libselinux-python
            ssh-keygen -t rsa -N "" -f pulp_server_key
            cat pulp_server_key.pub >> ~/.ssh/authorized_keys
            export ANSIBLE_HOST_KEY_CHECKING=False
            echo 'localhost' > hosts
            source ${{RHN_CREDENTIALS}}
            ansible-playbook --private-key pulp_server_key -i hosts ci/ansible/pulp_server.yaml \
                -e pulp_version={pulp_version} \
                -e "rhn_username=${{RHN_USERNAME}}" \
                -e "rhn_password=${{RHN_PASSWORD}}" \
                -e "rhn_poolid=${{RHN_POOLID}}" \
                -e "rhn_atomic_poolid=${{RHN_ATOMIC_POOLID}}"
            if [ "${{PULP_VERSION}}" = "2.8" ]; then
                ansible-playbook --private-key pulp_server_key -i hosts ci/ansible/pulp_coverage.yaml
            fi
            echo ${{SSH_CONNECTION}} | awk '{{ print "BASE_URL=https://"$3 }}' >> parameters.txt
            cp /etc/pki/CA/cacert.pem cacert.pem
        - inject:
            properties-file: parameters.txt
        - trigger-builds:
            - project:
                - pulp-smash-runner
              block: true
              predefined-parameters: |
                  BASE_URL=$BASE_URL
                  PULP_VERSION=$PULP_VERSION
              block-thresholds:
                  build-step-failure-threshold: never
                  unstable-threshold: never
                  failure-threshold: never
              parameter-factories:
                  - factory: binaryfile
                    parameter-name: PRIVATE_KEY
                    file-pattern: pulp_server_key
                    no-files-found-action: FAIL
                  - factory: binaryfile
                    parameter-name: CA_CERT
                    file-pattern: cacert.pem
                    no-files-found-action: FAIL
        - copyartifact:
            project: pulp-smash-runner
            which-build: specific-build
            build-number: ${{TRIGGERED_BUILD_NUMBER_PULP_SMASH_RUNNER}}
            flatten: true
        - shell: |
            if [ "${{PULP_VERSION}}" = "2.8" ]; then
                ansible-playbook --private-key pulp_server_key -i hosts ci/ansible/pulp_coverage.yaml \
                    -e pulp_coverage_action=report \
                    -e pulp_coverage_report_dir=/tmp \
                    -e pulp_coverage_report_xml=true
                cp /tmp/report.xml coverage.xml
            fi
            if [[ "${{OS}}" =~ "rhel[0-9]" ]]; then
                subscription-manager unregister
                subscription-manager clean
            fi
        - conditional-step:
            condition-kind: regex-match
            regex: '2.8'
            label: '${{ENV,var="PULP_VERSION"}}'
            steps:
                - sonar:
                    sonar-name: 'Sonar Test Server'
        - conditional-step:
            condition-kind: current-status
            condition-worst: FAILURE
            condition-best: UNSTABLE
            steps:
                - shell: |
                    rm -rf logs
                    mkdir logs
                    if [ $(which journalctl1 &> /dev/null) ]; then
                        journalctl > logs/syslog
                    else
                        cat /var/log/messages > logs/syslog
                    fi
                    [ -e /var/log/httpd ] && cp /var/log/httpd logs
                    [ -e /var/log/squid ] && cp /var/log/squid logs
                    tar -zcf logs.tar.gz logs
    publishers:
        - junit:
            results: nose2-junit.xml
        - cobertura:
            report-file: "coverage.xml"
            targets:
                - files:
                    healthy: 10
                    unhealthy: 20
                    failing: 30
                - method:
                    healthy: 50
                    unhealthy: 40
                    failing: 30
        - archive:
            artifacts: "*.tar.gz"
            allow-empty: true
        - irc-notify-all-summary
        - mark-node-offline

- job:
    name: pulp-smash-runner
    concurrent: true
    properties:
        - copyartifact:
            projects: pulp-*-dev-*
    node: f22-np
    parameters:
        - string:
            name: BASE_URL
        - string:
            name: PULP_VERSION
            decription: Pulp version setup on the server.
        - file:
            name: PRIVATE_KEY
            description: Private ssh key to connect on the server.
        - file:
            name: CA_CERT
            description: The CA certificate that signed the Pulp apache server.
    scm:
        - pulp-packaging-github
    builders:
        - shell: |
            # Setup ssh config and private key
            cat > ~/.ssh/config <<EOF
            Host $(echo ${BASE_URL} | cut -d/ -f3)
                User jenkins
                StrictHostKeyChecking no
                UserKnownHostsFile /dev/null
                IdentityFile ${PWD}/PRIVATE_KEY
            EOF
            chmod 600 PRIVATE_KEY ~/.ssh/config

            # Set up the CA certificate that signed Pulp's apache server.
            sudo cp CA_CERT /etc/pki/ca-trust/source/anchors/cacert.pem
            sudo update-ca-trust

            sudo yum -y install python-pip python-virtualenv
            virtualenv venv
            source venv/bin/activate
            git clone http://github.com/PulpQE/pulp-smash.git
            cd pulp-smash
            pip install -U setuptools
            pip install -r requirements.txt nose2

            mkdir -p pulp_smash
            cat > pulp_smash/settings.json <<EOF
            {
                "default": {
                    "base_url": "${BASE_URL}",
                    "auth": ["admin", "admin"],
                    "version": "${PULP_VERSION}",
                    "cli_transport": "ssh",
                    "verify": true
                }
            }
            EOF
            XDG_CONFIG_DIRS=. nose2 -v --plugin nose2.plugins.junitxml -X --junit-xml pulp_smash.tests
    publishers:
        - archive:
            artifacts: 'pulp-smash/nose2-junit.xml'
        - mark-node-offline
        - email-ext:
            recipients: $PULP_AUTOMATION_EMAIL_RECIPIENTS
            attach-build-log: true
