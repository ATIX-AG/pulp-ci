# The macro to trigger remote Jenkins Jobs by satellite-pulp test.
# The {TRIGGER_TYPE} can either be 1) "installation", to trigger satellite6-installer, or
# 2) "robottelo", to trigger satellite6-standalone-automation job.
- builder:
    name: satellite6-pulp-macro
    builders:
        - shining-panda:
            build-environment: virtualenv
            name: satellite6-pulp-trigger
            python-version: System-CPython-2.7
            nature: shell
            command: |
                pip install -U pip
                pip install requests
        - shining-panda:
            build-environment: virtualenv
            name: satellite6-pulp-trigger
            python-version: System-CPython-2.7
            nature: python
            command: |
                from __future__ import print_function
                import logging
                import os
                import pip
                import pprint
                import requests
                import sys
                import time

                JENKINS_URL = os.environ.get('REMOTE_JENKINS_URL')
                JENKINS_API_TOKEN = os.environ.get('REMOTE_JENKINS_API_TOKEN')
                JENKINS_USERNAME = os.environ.get('REMOTE_JENKINS_USERNAME')
                # Change the remote job name here.
                trigger_type = "{TRIGGER_TYPE}"
                if trigger_type == 'installation':
                    remote_job_name = 'satellite6-installer'
                elif trigger_type == 'robottelo':
                    remote_job_name = 'satellite6-standalone-automation'
                else:
                    print('The job has failed because the trigger type cannot be recognized.')
                    print(
                        'Available trigger types are: 1) installation, to trigger '
                        'satellite6-installer job; 2) robottelo, to trigger '
                        'satellite6-standalone-automation job.'
                    )
                    sys.exit(1)

                logging.captureWarnings(True)
                print('Get crumb from Satellite Jenkins server...')
                crumb = requests.get(
                    JENKINS_URL + '/crumbIssuer/api/json',
                    auth=(JENKINS_USERNAME, JENKINS_API_TOKEN),
                    verify=False
                ).json()
                print('Trigger the remote Jenkins job {{}}...'.format(remote_job_name))

                queue_url = requests.post(
                    JENKINS_URL + '/job/{{}}/buildWithParameters'
                    .format(remote_job_name),
                    auth=(JENKINS_USERNAME, JENKINS_API_TOKEN),
                    data={{
                        'SERVER_HOSTNAME': os.environ.get('INSTANCE_FQDN'),
                        'DISTRIBUTION': "{DISTRIBUTION}",
                        'SATELLITE_RELEASE': "{SATELLITE_RELEASE}",
                        'SATELLITE_VERSION': "{SATELLITE_VERSION}",
                        'SETUP_FAKE_MANIFEST_CERTIFICATE': True,
                        'TEST_TYPE': "{SATELLITE_TEST_TYPE}",
                        'REMOTE_JENKINS_USERNAME': os.environ.get('REMOTE_JENKINS_USERNAME'),
                        'REMOTE_JENKINS_API_TOKEN': os.environ.get('REMOTE_JENKINS_API_TOKEN'),
                        'REMOTE_JENKINS_URL': os.environ.get('REMOTE_JENKINS_URL'),
                        crumb['crumbRequestField']: crumb['crumb']
                    }},
                    verify=False
                ).headers['Location']

                time.sleep(5)
                queue = requests.get(queue_url + '/api/json', verify=False).json()
                while not queue.get('executable'):
                    time.sleep(1)
                    queue = requests.get(queue_url + '/api/json', verify=False).json()
                print('Job #{{0}} ({{1}}) was triggered...'.format(
                    queue['executable']['number'],
                    queue['executable']['url']
                ))

                result = ''
                while not result:
                    time.sleep(30)
                    response = requests.get(
                        JENKINS_URL + '/job/{{0}}/{{1}}/api/json'
                        .format(
                            remote_job_name,
                            queue['executable']['number']
                        ),
                        verify=False
                    ).json()
                    result = response.get('result') or ''
                    if result.lower() == 'failure':
                        print(
                            'Triggered job failed. Check its console output '
                            'for more information: {{}}console'
                            .format(queue['executable']['url'])
                        )
                        sys.exit(1)
                    elif result.lower() == 'success':
                        print('Triggered job succeeded.')
                    elif result:
                        print(
                            'Triggered job completed with result: {{}}'
                            .format(result)
                        )
                        sys.exit(1)


# This job automates the process of deploying Satellite 6 on OpenStack instances
# and upgrading the Pulp for Robottelo and Pulp Smash tests.
# Prerequisites:
#     1) Active account on OpenStack platform.
#     2) Download the OpenStack RC file from Access&Security>API Access.
#     3) Create a secret credential file <os-secret.sh> with the following format:
#         export OS_AUTH_URL=OS_AUTH_URL
#         export OS_USERNAME=OS_USERNAME
#         export OS_PASSWORD=password
#         export OS_TENANT_NAME='"US.ENG Perf R&D"'
#     4) Upload this secret file to Jenkins UI, for a credentials-binding id.
#     5) Create a secret credential file <jenkins-secret.sh>:
#         export REMOTE_JENKINS_USERNAME=username
#         export REMOTE_JENKINS_API_TOKEN=token
#         export REMOTE_JENKINS_URL=<remote-jenkins-server-host>
#     4) Upload this secret file to Jenkins UI, for a credentials-binding id.
# The automation steps are as following:
#     1) Create an instance on Open Stack;
#     2) Run satellite6-installer to install latest Satellite 6 downstream build;
#     3) Run satellite6-pulp-upgrade job to upgrade the version of Pulp;
#     4) Run satellite6-standalone-automation.
# This Jenkins job thus glues these steps together, in order to provide automated sanity checks.

- job:
    name: satellite6-pulp-automation
    node: f23-vanilla-np
    properties:
        - qe-ownership
    wrappers:
        - ansicolor
        - ssh-agent-credentials:
            users:
                - '044c0620-d67e-4172-9814-dc49e443e7b6'
        - credentials-binding:
            - file:
                credential-id: 7ca95790-1c85-4418-ac4c-082a366cf2db
                variable: REMOTE_JENKINS_CREDENTIALS
            - file:
                credential-id: ff1c87ec-76f1-4bb1-a947-fd2114cd8fd9
                variable: OPENSTACK_CREDENTIALS
    builders:
        - shell: |
            source ${OPENSTACK_CREDENTIALS}
            source ${REMOTE_JENKINS_CREDENTIALS}

            sudo dnf -y install python-devel redhat-rpm-config wget
            sudo pip install -U pip virtualenv
            virtualenv satellite-pulp
            source satellite-pulp/bin/activate
            pip install python-glanceclient python-novaclient

            # Only underscores, hyphens, and alphanumeric characters are allowed for keypair names
            KEY_NAME="pulp-jenkins"
            INSTANCE_NAME="${KEY_NAME}-sat6-tester"
            IMAGE_ID="$(glance image-list | grep '| rhel-guest-image-7.2' | awk '{ print $2 }')"

            # Upload SSH key pair for OpenStack instance.
            if [[ -z "$(nova keypair-list | grep ${KEY_NAME} | awk '{ print $2 }')" ]]; then
                echo "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC6DJ8fmd61DWPCMiOEuy96ajI7rL3rWu7C9NQhE9a4SfyaiBcghREHJNCz9LGJ57jtOmNV0+UEDhyvTckZI2YQeDqGCP/xO9B+5gQNlyGZ9gSmFz+68NhYQ0vRekikpb9jNdy6ZZbfZDLp1w7dxqDIKfoyu7QO3Qr3E/9CpiucQif2p+oQOVOCdKEjvGYNkYQks0jVTYNRscgmcezpfLKhqWzAre5+JaMB0kRD5Nqadm2uXKZ4cNYStrpZ4xUrnMvAqjormxW2VJNx+0716Wc2Byhg8Nva+bsOkxp/GewBWHfNPtzQGMsL7oYZPtOd/LrmyYeu/M5Uz7/6QCv4N90P pulp" > pulp-jenkins.pub
                echo "ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAzoPajR2xtQOAfBebX69Mx9Ee4P/LMqlxQLKvF0bc79/1ayMf3IrmpY1V6JCpABvMV1830I9D9x9Tr8E9zjg2wWT14hhHsrUKSWUsy3doIwz3MtISBZPMig5AizVjH6Wl/t833zgkeHtStCYI/bmJQykj6AgB8/A4L5SRIpNnl1q7V+sw37Rmumaiqu4lRDXyTXY7mlOCuxrus/WcGyVTh2k+oBVqkz2V2s3+Or8Zy2Y441B4z3vF3lE6aoIBwidBVZ1LKaofZDMRf/lu575cI4AB3N5DQvpqwLSc4+HIvog0FdKUo3qMaFgg0KNkYS5fnpDpRDRQnFw7oFnBHiPNqw== jenkins@satellite-jenkins" >> pulp-jenkins.pub
                nova keypair-add --pub-key pulp-jenkins.pub "${KEY_NAME}"
            fi

            # Setup security group rules.
            if [[ -z "$(nova secgroup-list | grep ${KEY_NAME})" ]]; then
                nova secgroup-create "${KEY_NAME}" "Security group for Satellite6-Pulp testing"
            fi

            if [[ -z $(nova secgroup-list-rules "${KEY_NAME}" | grep "0.0.0.0/0") ]]; then
                nova secgroup-add-rule "${KEY_NAME}" icmp -1 -1 0.0.0.0/0
                for tcp_port in 22 80 443 5000 5646 5647 5671 8000 8140 8443 9090; do
                    nova secgroup-add-rule "${KEY_NAME}" tcp $tcp_port $tcp_port 0.0.0.0/0
                done
                for udp_port in 53 69; do
                    nova secgroup-add-rule "${KEY_NAME}" udp $udp_port $udp_port 0.0.0.0/0
                done
            fi

            # Check if there is an instance running and delete it
            if [ "$(nova list | grep ${INSTANCE_NAME})" ]; then
                nova delete "${INSTANCE_NAME}"
                while [ "$(nova list | grep ${INSTANCE_NAME})" ]; do
                    sleep 5
                done
            fi

            FLOATING_IP="$(nova floating-ip-list | grep '| -' | awk '{ print $4 }' | head -n 1)"
            INSTANCE_HOSTNAME="host-$(echo ${FLOATING_IP} | cut -d. -f 2- | sed 's/\./-/g')"
            INSTANCE_FQDN="${INSTANCE_HOSTNAME}.host.centralci.eng.rdu2.redhat.com"
            cat > cloud-config.txt << EOF
            #cloud-config
            fqdn: ${INSTANCE_FQDN}
            hostname: ${INSTANCE_HOSTNAME}
            manage_etc_hosts: true
            EOF

            nova boot --flavor 'm4.xlarge' \
                --image "${IMAGE_ID}" \
                --key-name $KEY_NAME \
                --security-groups "${KEY_NAME}" \
                --user-data cloud-config.txt \
                "${INSTANCE_NAME}"
            COUNTER=1
            while [[ -z "$(nova list | grep -e ACTIVE -e Running | grep ${INSTANCE_NAME})" ]]; do
                echo "The network is not yet ready ${COUNTER} times..."
                let COUNTER+=1
                if [[ ${COUNTER} -gt 60 ]]; then
                    echo "The OpenStack instance was failed to create..."
                    exit 1
                fi
                sleep 1
            done
            INSTANCE_IP="$(nova list | grep -e ACTIVE -e Running | grep ${INSTANCE_NAME} | awk '{ print $12 }' | head -1 | grep -E -o '([0-9]+\.?){4}')"
            INSTANCE_ID="$(nova list | grep ${INSTANCE_NAME} | awk {' print $2 '} | head -1)"

            # Associate the floating IP
            nova floating-ip-associate "${INSTANCE_ID}" "${FLOATING_IP}"

            # Inject environment variables.
            echo "KEY_NAME=${KEY_NAME}" > jenkins_openstack.properties
            echo "INSTANCE_IP=${FLOATING_IP}" >> jenkins_openstack.properties
            echo "INSTANCE_HOSTNAME=${INSTANCE_HOSTNAME}" >> jenkins_openstack.properties
            echo "INSTANCE_FQDN=${INSTANCE_FQDN}" >> jenkins_openstack.properties
            echo "INSTANCE_ID=${INSTANCE_ID}" >> jenkins_openstack.properties
            echo "SECURITY_GROUP_NAME=${SECURITY_GROUP_NAME}" >> jenkins_openstack.properties
            echo "REMOTE_JENKINS_USERNAME=${REMOTE_JENKINS_USERNAME}" >> jenkins_openstack.properties
            echo "REMOTE_JENKINS_API_TOKEN=${REMOTE_JENKINS_API_TOKEN}" >> jenkins_openstack.properties
            echo "REMOTE_JENKINS_URL=${REMOTE_JENKINS_URL}" >> jenkins_openstack.properties
        - inject:
            properties-file: jenkins_openstack.properties
        - shell: |
            # Wait until the OpenStack instance can be connected by SSH sessions.
            # The following trigger builders will depend on SSH connectivity.
            set +e
            COUNTER=0
            while true; do
                ssh -o ConnectTimeout=5 \
                    -o StrictHostKeyChecking=no \
                    "cloud-user@${INSTANCE_IP}" echo testing
                if [[ $? = 0 ]]; then
                    break
                fi
                let COUNTER+=1
                echo "${INSTANCE_IP} is not yet ready for ${COUNTER} times...";
                sleep 5
            done
            set -e
        - satellite6-pulp-macro:
            # Generic macro call for satellite6-installer
            TRIGGER_TYPE: "installation"
            DISTRIBUTION: "DOWNSTREAM"
            SATELLITE_RELEASE: "GA"
            SATELLITE_VERSION: "6.2"
            SATELLITE_TEST_TYPE: ""
        - trigger-builds:
            - project: "satellite6-pulp-upgrade"
              block: true
              predefined-parameters: |
                  INSTANCE_IP=${INSTANCE_IP}
        - satellite6-pulp-macro:
            # Generic macro call for satellite6-standalone-automation
            TRIGGER_TYPE: "robottelo"
            SATELLITE_TEST_TYPE: "endtoend-api"
            DISTRIBUTION: ""
            SATELLITE_RELEASE: ""
            SATELLITE_VERSION: ""
        - shell: |
            source satellite-pulp/bin/activate
            source "${OPENSTACK_CREDENTIALS}"
            if [[ ! -z "$(nova list | grep ${INSTANCE_ID})" ]]; then
               nova delete "${INSTANCE_ID}"
            fi
